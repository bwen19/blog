// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: tag.sql

package db

import (
	"context"
)

const createArticleTag = `-- name: CreateArticleTag :one
INSERT INTO article_tags (
    article_id,
    tag
) VALUES (
    $1, $2
) RETURNING article_id, tag
`

type CreateArticleTagParams struct {
	ArticleID int64  `json:"article_id"`
	Tag       string `json:"tag"`
}

func (q *Queries) CreateArticleTag(ctx context.Context, arg CreateArticleTagParams) (ArticleTag, error) {
	row := q.db.QueryRowContext(ctx, createArticleTag, arg.ArticleID, arg.Tag)
	var i ArticleTag
	err := row.Scan(&i.ArticleID, &i.Tag)
	return i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags ( name ) VALUES ( $1 )
RETURNING name, count
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	var i Tag
	err := row.Scan(&i.Name, &i.Count)
	return i, err
}

const deleteArticleTag = `-- name: DeleteArticleTag :exec
DELETE FROM article_tags
WHERE article_id = $1
    AND tag = $2
`

type DeleteArticleTagParams struct {
	ArticleID int64  `json:"article_id"`
	Tag       string `json:"tag"`
}

func (q *Queries) DeleteArticleTag(ctx context.Context, arg DeleteArticleTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteArticleTag, arg.ArticleID, arg.Tag)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE name = $1
`

func (q *Queries) DeleteTag(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteTag, name)
	return err
}

const getTag = `-- name: GetTag :one
SELECT name, count FROM tags
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, name)
	var i Tag
	err := row.Scan(&i.Name, &i.Count)
	return i, err
}

const listArticleTags = `-- name: ListArticleTags :many
SELECT tag FROM article_tags
WHERE article_id = $1
`

func (q *Queries) ListArticleTags(ctx context.Context, articleID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listArticleTags, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag string
		if err := rows.Scan(&tag); err != nil {
			return nil, err
		}
		items = append(items, tag)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT name, count FROM tags
ORDER BY count DESC
LIMIT $1
OFFSET $2
`

type ListTagsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTags(ctx context.Context, arg ListTagsParams) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.Name, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tags
SET
    name = CASE WHEN $1::bool
        THEN $2::varchar
        ELSE name END,
    count = CASE WHEN $3::bool THEN $4::bigint
        WHEN $5::bool THEN count + 1
        WHEN $6::bool THEN count - 1
        ELSE count END
WHERE name = $7::varchar
RETURNING name, count
`

type UpdateTagParams struct {
	SetNewName bool   `json:"set_new_name"`
	NewName    string `json:"new_name"`
	SetCount   bool   `json:"set_count"`
	Count      int64  `json:"count"`
	AddCount   bool   `json:"add_count"`
	MinusCount bool   `json:"minus_count"`
	Name       string `json:"name"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, updateTag,
		arg.SetNewName,
		arg.NewName,
		arg.SetCount,
		arg.Count,
		arg.AddCount,
		arg.MinusCount,
		arg.Name,
	)
	var i Tag
	err := row.Scan(&i.Name, &i.Count)
	return i, err
}
