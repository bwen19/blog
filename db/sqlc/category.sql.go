// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories ( name ) VALUES ( $1 )
RETURNING name
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	err := row.Scan(&name)
	return name, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE name = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, name)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT name FROM categories
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getCategory, name)
	err := row.Scan(&name)
	return name, err
}

const listCategories = `-- name: ListCategories :many
SELECT name FROM categories
ORDER BY name
`

func (q *Queries) ListCategories(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = $1::varchar
WHERE name = $2::varchar
RETURNING name
`

type UpdateCategoryParams struct {
	NewName string `json:"new_name"`
	Name    string `json:"name"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.NewName, arg.Name)
	var name string
	err := row.Scan(&name)
	return name, err
}
